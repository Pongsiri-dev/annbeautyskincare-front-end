{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/map/viewport-animation/index.tsx\";\nimport { useState, useCallback } from 'react';\nimport MapGL, { FlyToInterpolator } from 'react-map-gl';\n// components\nimport { MapControlScale, MapControlGeolocate, MapControlNavigation, MapControlFullscreen } from '../../../components/map'; //\n\nimport ControlPanel from './ControlPanel'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapViewportAnimation(_ref) {\n  let {\n    data,\n    ...other\n  } = _ref;\n  const [selectedCity, setSelectedCity] = useState(data[2].city);\n  const [viewport, setViewport] = useState({\n    latitude: 37.7751,\n    longitude: -122.4193,\n    zoom: 10,\n    bearing: 0,\n    pitch: 0\n  });\n  const handleChangeCity = useCallback((event, _ref2) => {\n    let {\n      longitude,\n      latitude\n    } = _ref2;\n    setSelectedCity(event.target.value);\n    setViewport({\n      longitude,\n      latitude,\n      zoom: 10,\n      transitionInterpolator: new FlyToInterpolator({\n        speed: 1.2\n      }),\n      transitionDuration: 'auto'\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapGL, { ...viewport,\n    onViewportChange: setViewport,\n    dragRotate: false,\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(MapControlScale, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapControlNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapControlFullscreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapControlGeolocate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      data: data,\n      selectedCity: selectedCity,\n      handleChange: handleChangeCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/map/viewport-animation/index.tsx"],"names":["useState","useCallback","MapGL","FlyToInterpolator","MapControlScale","MapControlGeolocate","MapControlNavigation","MapControlFullscreen","ControlPanel","MapViewportAnimation","data","other","selectedCity","setSelectedCity","city","viewport","setViewport","latitude","longitude","zoom","bearing","pitch","handleChangeCity","event","target","value","transitionInterpolator","speed","transitionDuration"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,KAAP,IAAgBC,iBAAhB,QAAyC,cAAzC;AAIA;AACA,SACEC,eADF,EAEEC,mBAFF,EAGEC,oBAHF,EAIEC,oBAJF,QAKO,yBALP,C,CAMA;;AACA,OAAOC,YAAP,MAAyB,gBAAzB,C,CAEA;;;AAMA,eAAe,SAASC,oBAAT,OAA6E;AAAA,MAA/C;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAA+C;AAC1F,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAACU,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAAT,CAAhD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAsB;AAC5DiB,IAAAA,QAAQ,EAAE,OADkD;AAE5DC,IAAAA,SAAS,EAAE,CAAC,QAFgD;AAG5DC,IAAAA,IAAI,EAAE,EAHsD;AAI5DC,IAAAA,OAAO,EAAE,CAJmD;AAK5DC,IAAAA,KAAK,EAAE;AALqD,GAAtB,CAAxC;AAQA,QAAMC,gBAAgB,GAAGrB,WAAW,CAAC,CAACsB,KAAD,YAAoC;AAAA,QAA5B;AAAEL,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAA4B;AACvEJ,IAAAA,eAAe,CAACU,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACAT,IAAAA,WAAW,CAAC;AACVE,MAAAA,SADU;AAEVD,MAAAA,QAFU;AAGVE,MAAAA,IAAI,EAAE,EAHI;AAIVO,MAAAA,sBAAsB,EAAE,IAAIvB,iBAAJ,CAAsB;AAAEwB,QAAAA,KAAK,EAAE;AAAT,OAAtB,CAJd;AAKVC,MAAAA,kBAAkB,EAAE;AALV,KAAD,CAAX;AAOD,GATmC,EASjC,EATiC,CAApC;AAWA,sBACE,QAAC,KAAD,OAAWb,QAAX;AAAqB,IAAA,gBAAgB,EAAEC,WAAvC;AAAoD,IAAA,UAAU,EAAE,KAAhE;AAAA,OAA2EL,KAA3E;AAAA,4BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,YAJF,eAME,QAAC,YAAD;AAAc,MAAA,IAAI,EAAED,IAApB;AAA0B,MAAA,YAAY,EAAEE,YAAxC;AAAsD,MAAA,YAAY,EAAEU;AAApE;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD","sourcesContent":["import { useState, useCallback } from 'react';\nimport MapGL, { FlyToInterpolator } from 'react-map-gl';\nimport { InteractiveMapProps } from 'react-map-gl/src/components/interactive-map';\n// @types\nimport { CityData } from '../../../components/map/type';\n// components\nimport {\n  MapControlScale,\n  MapControlGeolocate,\n  MapControlNavigation,\n  MapControlFullscreen,\n} from '../../../components/map';\n//\nimport ControlPanel from './ControlPanel';\n\n// ----------------------------------------------------------------------\n\ninterface MapViewportAnimationProps extends InteractiveMapProps {\n  data: CityData[];\n}\n\nexport default function MapViewportAnimation({ data, ...other }: MapViewportAnimationProps) {\n  const [selectedCity, setSelectedCity] = useState(data[2].city);\n  const [viewport, setViewport] = useState<Record<string, any>>({\n    latitude: 37.7751,\n    longitude: -122.4193,\n    zoom: 10,\n    bearing: 0,\n    pitch: 0,\n  });\n\n  const handleChangeCity = useCallback((event, { longitude, latitude }) => {\n    setSelectedCity(event.target.value);\n    setViewport({\n      longitude,\n      latitude,\n      zoom: 10,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: 'auto',\n    });\n  }, []);\n\n  return (\n    <MapGL {...viewport} onViewportChange={setViewport} dragRotate={false} {...other}>\n      <MapControlScale />\n      <MapControlNavigation />\n      <MapControlFullscreen />\n      <MapControlGeolocate />\n\n      <ControlPanel data={data} selectedCity={selectedCity} handleChange={handleChangeCity} />\n    </MapGL>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}