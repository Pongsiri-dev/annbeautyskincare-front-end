{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/@dashboard/user/account/AccountBilling.tsx\";\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack'; // @mui\n\nimport { Box, Grid, Card, Button, Typography, Stack } from '@mui/material'; // @types\n\n//\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountBilling(_ref) {\n  let {\n    cards,\n    addressBook,\n    invoices\n  } = _ref;\n  const [open, setOpen] = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewCardSchema = Yup.object().shape({\n    cardName: Yup.string().required('Name is required'),\n    cardNumber: Yup.string().required('Card number is required'),\n    cardExpired: Yup.string().required('Card expired is required'),\n    cardCvv: Yup.string().required('Cvv is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      cardName: '',\n      cardNumber: '',\n      cardExpired: '',\n      cardCvv: ''\n    },\n    validationSchema: NewCardSchema,\n    onSubmit: async (values, _ref2) => {\n      let {\n        setSubmitting,\n        resetForm\n      } = _ref2;\n      await new Promise(resolve => setTimeout(resolve, 500));\n      handleCancel();\n      resetForm();\n      setSubmitting(false);\n      enqueueSnackbar('Add card success', {\n        variant: 'success'\n      });\n    }\n  });\n\n  const handleOpenAddCard = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    formik.resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 5,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 8,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            sx: {\n              mb: 3,\n              display: 'block',\n              color: 'text.secondary'\n            },\n            children: \"Your Plan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Premium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: {\n                xs: 2,\n                sm: 0\n              },\n              position: {\n                sm: 'absolute'\n              },\n              top: {\n                sm: 24\n              },\n              right: {\n                sm: 24\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              color: \"inherit\",\n              variant: \"outlined\",\n              sx: {\n                mr: 1\n              },\n              children: \"Cancel plan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"outlined\",\n              children: \"Upgrade plan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccountBillingPaymentMethod, {\n          cards: cards,\n          formik: formik,\n          isOpen: open,\n          onOpen: handleOpenAddCard,\n          onCancel: handleCancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccountBillingAddressBook, {\n          addressBook: addressBook\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 4,\n      children: /*#__PURE__*/_jsxDEV(AccountBillingInvoiceHistory, {\n        invoices: invoices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/@dashboard/user/account/AccountBilling.tsx"],"names":["Yup","useFormik","useState","useSnackbar","Box","Grid","Card","Button","Typography","Stack","AccountBillingAddressBook","AccountBillingPaymentMethod","AccountBillingInvoiceHistory","AccountBilling","cards","addressBook","invoices","open","setOpen","enqueueSnackbar","NewCardSchema","object","shape","cardName","string","required","cardNumber","cardExpired","cardCvv","formik","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","Promise","resolve","setTimeout","handleCancel","variant","handleOpenAddCard","prevOpen","p","mb","display","color","mt","xs","sm","position","top","right","mr"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack';\n// @mui\nimport { Box, Grid, Card, Button, Typography, Stack } from '@mui/material';\n// @types\nimport { CreditCard, UserAddressBook, UserInvoice } from '../../../../@types/user';\n//\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  cards: CreditCard[];\n  invoices: UserInvoice[];\n  addressBook: UserAddressBook[];\n};\n\nexport default function AccountBilling({ cards, addressBook, invoices }: Props) {\n  const [open, setOpen] = useState(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewCardSchema = Yup.object().shape({\n    cardName: Yup.string().required('Name is required'),\n    cardNumber: Yup.string().required('Card number is required'),\n    cardExpired: Yup.string().required('Card expired is required'),\n    cardCvv: Yup.string().required('Cvv is required'),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      cardName: '',\n      cardNumber: '',\n      cardExpired: '',\n      cardCvv: '',\n    },\n    validationSchema: NewCardSchema,\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      handleCancel();\n      resetForm();\n      setSubmitting(false);\n      enqueueSnackbar('Add card success', { variant: 'success' });\n    },\n  });\n\n  const handleOpenAddCard = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    formik.resetForm();\n  };\n\n  return (\n    <Grid container spacing={5}>\n      <Grid item xs={12} md={8}>\n        <Stack spacing={3}>\n          <Card sx={{ p: 3 }}>\n            <Typography\n              variant=\"overline\"\n              sx={{ mb: 3, display: 'block', color: 'text.secondary' }}\n            >\n              Your Plan\n            </Typography>\n            <Typography variant=\"h4\">Premium</Typography>\n            <Box\n              sx={{\n                mt: { xs: 2, sm: 0 },\n                position: { sm: 'absolute' },\n                top: { sm: 24 },\n                right: { sm: 24 },\n              }}\n            >\n              <Button size=\"small\" color=\"inherit\" variant=\"outlined\" sx={{ mr: 1 }}>\n                Cancel plan\n              </Button>\n              <Button size=\"small\" variant=\"outlined\">\n                Upgrade plan\n              </Button>\n            </Box>\n          </Card>\n\n          <AccountBillingPaymentMethod\n            cards={cards}\n            formik={formik}\n            isOpen={open}\n            onOpen={handleOpenAddCard}\n            onCancel={handleCancel}\n          />\n\n          <AccountBillingAddressBook addressBook={addressBook} />\n        </Stack>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <AccountBillingInvoiceHistory invoices={invoices} />\n      </Grid>\n    </Grid>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}