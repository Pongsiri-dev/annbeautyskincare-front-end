{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/@dashboard/chat/ChatConversationList.tsx\";\nimport { useNavigate } from 'react-router-dom'; // @mui\n\nimport { List } from '@mui/material'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // @types\n\n// components\nimport { SkeletonConversationItem } from '../../../components/skeleton'; //\n\nimport ChatConversationItem from './ChatConversationItem'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatConversationList(_ref) {\n  let {\n    conversations,\n    isOpenSidebar,\n    activeConversationId,\n    sx,\n    ...other\n  } = _ref;\n  const navigate = useNavigate();\n\n  const handleSelectConversation = conversationId => {\n    let conversationKey = '';\n    const conversation = conversations.byId[conversationId];\n\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(participant => participant.id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n\n      if (otherParticipant === null || otherParticipant === void 0 ? void 0 : otherParticipant.username) {\n        conversationKey = otherParticipant === null || otherParticipant === void 0 ? void 0 : otherParticipant.username;\n      }\n    }\n\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\n  };\n\n  const loading = !conversations.allIds.length;\n  return /*#__PURE__*/_jsxDEV(List, {\n    disablePadding: true,\n    sx: sx,\n    ...other,\n    children: (loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) => conversationId ? /*#__PURE__*/_jsxDEV(ChatConversationItem, {\n      isOpenSidebar: isOpenSidebar,\n      conversation: conversations.byId[conversationId],\n      isSelected: activeConversationId === conversationId,\n      onSelectConversation: () => handleSelectConversation(conversationId)\n    }, conversationId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(SkeletonConversationItem, {}, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/@dashboard/chat/ChatConversationList.tsx"],"names":["useNavigate","List","PATH_DASHBOARD","SkeletonConversationItem","ChatConversationItem","ChatConversationList","conversations","isOpenSidebar","activeConversationId","sx","other","navigate","handleSelectConversation","conversationId","conversationKey","conversation","byId","type","id","otherParticipant","participants","find","participant","username","chat","root","loading","allIds","length","Array","map","index"],"mappings":";AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,IAAT,QAA8B,eAA9B,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CACA;;AAEA;AACA,SAASC,wBAAT,QAAyC,8BAAzC,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,wBAAjC,C,CAEA;;;AAYA,eAAe,SAASC,oBAAT,OAML;AAAA,MANmC;AAC3CC,IAAAA,aAD2C;AAE3CC,IAAAA,aAF2C;AAG3CC,IAAAA,oBAH2C;AAI3CC,IAAAA,EAJ2C;AAK3C,OAAGC;AALwC,GAMnC;AACR,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,wBAAwB,GAAIC,cAAD,IAA4B;AAC3D,QAAIC,eAAe,GAAG,EAAtB;AACA,UAAMC,YAAY,GAAGT,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CAArB;;AACA,QAAIE,YAAY,CAACE,IAAb,KAAsB,OAA1B,EAAmC;AACjCH,MAAAA,eAAe,GAAGC,YAAY,CAACG,EAA/B;AACD,KAFD,MAEO;AACL,YAAMC,gBAAgB,GAAGJ,YAAY,CAACK,YAAb,CAA0BC,IAA1B,CACtBC,WAAD,IAAiBA,WAAW,CAACJ,EAAZ,KAAmB,wCADb,CAAzB;;AAGA,UAAIC,gBAAJ,aAAIA,gBAAJ,uBAAIA,gBAAgB,CAAEI,QAAtB,EAAgC;AAC9BT,QAAAA,eAAe,GAAGK,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEI,QAApC;AACD;AACF;;AACDZ,IAAAA,QAAQ,CAAE,GAAET,cAAc,CAACsB,IAAf,CAAoBC,IAAK,IAAGX,eAAgB,EAAhD,CAAR;AACD,GAdD;;AAgBA,QAAMY,OAAO,GAAG,CAACpB,aAAa,CAACqB,MAAd,CAAqBC,MAAtC;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,cAAc,MAApB;AAAqB,IAAA,EAAE,EAAEnB,EAAzB;AAAA,OAAiCC,KAAjC;AAAA,cACG,CAACgB,OAAO,GAAG,CAAC,GAAGG,KAAK,CAAC,EAAD,CAAT,CAAH,GAAoBvB,aAAa,CAACqB,MAA1C,EAAkDG,GAAlD,CAAsD,CAACjB,cAAD,EAAiBkB,KAAjB,KACrDlB,cAAc,gBACZ,QAAC,oBAAD;AAEE,MAAA,aAAa,EAAEN,aAFjB;AAGE,MAAA,YAAY,EAAED,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CAHhB;AAIE,MAAA,UAAU,EAAEL,oBAAoB,KAAKK,cAJvC;AAKE,MAAA,oBAAoB,EAAE,MAAMD,wBAAwB,CAACC,cAAD;AALtD,OACOA,cADP;AAAA;AAAA;AAAA;AAAA,YADY,gBASZ,QAAC,wBAAD,MAA+BkB,KAA/B;AAAA;AAAA;AAAA;AAAA,YAVH;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD","sourcesContent":["import { useNavigate } from 'react-router-dom';\n// @mui\nimport { List, SxProps } from '@mui/material';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// @types\nimport { Conversation } from '../../../@types/chat';\n// components\nimport { SkeletonConversationItem } from '../../../components/skeleton';\n//\nimport ChatConversationItem from './ChatConversationItem';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  conversations: {\n    byId: Record<string, Conversation>;\n    allIds: string[];\n  };\n  isOpenSidebar: boolean;\n  activeConversationId: string | null;\n  sx?: SxProps;\n};\n\nexport default function ChatConversationList({\n  conversations,\n  isOpenSidebar,\n  activeConversationId,\n  sx,\n  ...other\n}: Props) {\n  const navigate = useNavigate();\n\n  const handleSelectConversation = (conversationId: string) => {\n    let conversationKey = '';\n    const conversation = conversations.byId[conversationId];\n    if (conversation.type === 'GROUP') {\n      conversationKey = conversation.id;\n    } else {\n      const otherParticipant = conversation.participants.find(\n        (participant) => participant.id !== '8864c717-587d-472a-929a-8e5f298024da-0'\n      );\n      if (otherParticipant?.username) {\n        conversationKey = otherParticipant?.username;\n      }\n    }\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\n  };\n\n  const loading = !conversations.allIds.length;\n\n  return (\n    <List disablePadding sx={sx} {...other}>\n      {(loading ? [...Array(12)] : conversations.allIds).map((conversationId, index) =>\n        conversationId ? (\n          <ChatConversationItem\n            key={conversationId}\n            isOpenSidebar={isOpenSidebar}\n            conversation={conversations.byId[conversationId]}\n            isSelected={activeConversationId === conversationId}\n            onSelectConversation={() => handleSelectConversation(conversationId)}\n          />\n        ) : (\n          <SkeletonConversationItem key={index} />\n        )\n      )}\n    </List>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}