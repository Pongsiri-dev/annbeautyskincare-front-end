{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Documents/GitHub/Valenta-front-end/src/sections/auth/register/RegisterForm.tsx\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // @mui\n\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@mui/material'; // utils\n\nimport { fData } from '../../../utils/formatNumber'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // @types\n\n// _mock\nimport { countries } from '../../../_mock'; // components\n\nimport { UploadAvatar } from '../../../components/upload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserNewForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewUserSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email(),\n    phoneNumber: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    country: Yup.string().required('country is required'),\n    company: Yup.string().required('Company is required'),\n    state: Yup.string().required('State is required'),\n    city: Yup.string().required('City is required'),\n    role: Yup.string().required('Role Number is required'),\n    avatarUrl: Yup.mixed().required('Avatar is required')\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: '',\n      email: '',\n      phoneNumber: '',\n      address: '',\n      country: '',\n      state: '',\n      city: '',\n      zipCode: '',\n      avatarUrl: '',\n      isVerified: '',\n      status: '',\n      company: '',\n      role: ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, _ref) => {\n      let {\n        setSubmitting,\n        resetForm,\n        setErrors\n      } = _ref;\n\n      try {\n        await new Promise(resolve => setTimeout(resolve, 500));\n        resetForm();\n        setSubmitting(false); // enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error.message);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n\n    if (file) {\n      setFieldValue('avatarUrl', { ...file,\n        preview: URL.createObjectURL(file)\n      });\n    }\n  }, [setFieldValue]);\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              py: 10,\n              px: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mb: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(UploadAvatar, {\n                accept: \"image/*\",\n                file: values.avatarUrl,\n                maxSize: 3145728,\n                onDrop: handleDrop,\n                error: Boolean(touched.avatarUrl && errors.avatarUrl),\n                caption: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  sx: {\n                    mt: 2,\n                    mx: 'auto',\n                    display: 'block',\n                    textAlign: 'center',\n                    color: 'text.secondary'\n                  },\n                  children: [\"Allowed *.jpeg, *.jpg, *.png, *.gif\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 23\n                  }, this), \" max size of \", fData(3145728)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n                error: true,\n                sx: {\n                  px: 2,\n                  textAlign: 'center'\n                },\n                children: touched.avatarUrl && errors.avatarUrl\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              labelPlacement: \"start\",\n              control: /*#__PURE__*/_jsxDEV(Switch, { ...getFieldProps('isVerified'),\n                checked: values.isVerified\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 26\n              }, this),\n              label: /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mb: 0.5\n                  },\n                  children: \"Email Verified\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    color: 'text.secondary'\n                  },\n                  children: \"Disabling this will automatically send the user a verification email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true),\n              sx: {\n                mx: 0,\n                width: 1,\n                justifyContent: 'space-between'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Full Name\",\n                  ...getFieldProps('name'),\n                  error: Boolean(touched.name && errors.name),\n                  helperText: touched.name && errors.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Email Address\",\n                  ...getFieldProps('email'),\n                  error: Boolean(touched.email && errors.email),\n                  helperText: touched.email && errors.email\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Phone Number\",\n                  ...getFieldProps('phoneNumber'),\n                  error: Boolean(touched.phoneNumber && errors.phoneNumber),\n                  helperText: touched.phoneNumber && errors.phoneNumber\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  select: true,\n                  fullWidth: true,\n                  label: \"Country\",\n                  placeholder: \"Country\",\n                  ...getFieldProps('country'),\n                  SelectProps: {\n                    native: true\n                  },\n                  error: Boolean(touched.country && errors.country),\n                  helperText: touched.country && errors.country,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 21\n                  }, this), countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: option.label,\n                    children: option.label\n                  }, option.code, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 241,\n                    columnNumber: 23\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"State/Region\",\n                  ...getFieldProps('state'),\n                  error: Boolean(touched.state && errors.state),\n                  helperText: touched.state && errors.state\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"City\",\n                  ...getFieldProps('city'),\n                  error: Boolean(touched.city && errors.city),\n                  helperText: touched.city && errors.city\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Address\",\n                  ...getFieldProps('address'),\n                  error: Boolean(touched.address && errors.address),\n                  helperText: touched.address && errors.address\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Zip/Code\",\n                  ...getFieldProps('zipCode')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Company\",\n                  ...getFieldProps('company'),\n                  error: Boolean(touched.company && errors.company),\n                  helperText: touched.company && errors.company\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Role\",\n                  ...getFieldProps('role'),\n                  error: Boolean(touched.role && errors.role),\n                  helperText: touched.role && errors.role\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  display: 'flex',\n                  justifyContent: 'flex-end'\n                },\n                children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  loading: isSubmitting\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n} // import * as Yup from 'yup';\n// import { useState } from 'react';\n// import { useSnackbar } from 'notistack';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// // @mui\n// import { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // hooks\n// import useAuth from '../../../hooks/useAuth';\n// import useIsMountedRef from '../../../hooks/useIsMountedRef';\n// // components\n// import Iconify from '../../../components/Iconify';\n// import { IconButtonAnimate } from '../../../components/animate';\n// // ----------------------------------------------------------------------\n// type InitialValues = {\n//   email: string;\n//   password: string;\n//   firstName: string;\n//   lastName: string;\n//   afterSubmit?: string;\n// };\n// export default function RegisterForm() {\n//   const { register } = useAuth();\n//   const isMountedRef = useIsMountedRef();\n//   const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(50, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required'),\n//   });\n//   const formik = useFormik<InitialValues>({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       email: '',\n//       password: '',\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: async (values, { setErrors, setSubmitting }) => {\n//       try {\n//         await register(values.email, values.password, values.firstName, values.lastName);\n//         enqueueSnackbar('Register success', {\n//           variant: 'success',\n//           action: (key) => (\n//             <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n//               <Iconify icon={'eva:close-fill'} />\n//             </IconButtonAnimate>\n//           ),\n//         });\n//         if (isMountedRef.current) {\n//           setSubmitting(false);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         if (isMountedRef.current) {\n//           setErrors({ afterSubmit: error.message });\n//           setSubmitting(false);\n//         }\n//       }\n//     },\n//   });\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n//           <TextField\n//             fullWidth\n//             autoComplete=\"username\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             {...getFieldProps('email')}\n//             error={Boolean(touched.email && errors.email)}\n//             helperText={touched.email && errors.email}\n//           />\n//           <TextField\n//             fullWidth\n//             autoComplete=\"current-password\"\n//             type={showPassword ? 'text' : 'password'}\n//             label=\"Password\"\n//             {...getFieldProps('password')}\n//             InputProps={{\n//               endAdornment: (\n//                 <InputAdornment position=\"end\">\n//                   <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n//                     <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n//                   </IconButton>\n//                 </InputAdornment>\n//               ),\n//             }}\n//             error={Boolean(touched.password && errors.password)}\n//             helperText={touched.password && errors.password}\n//           />\n//           <LoadingButton\n//             fullWidth\n//             size=\"large\"\n//             type=\"submit\"\n//             variant=\"contained\"\n//             loading={isSubmitting}\n//           >\n//             Register\n//           </LoadingButton>\n//         </Stack>\n//       </Form>\n//     </FormikProvider>\n//   );\n// }\n\n_s(UserNewForm, \"ZK15KKFpaswBzRTU3LbPqVBA7FQ=\", false, function () {\n  return [useNavigate, useSnackbar, useFormik];\n});\n\n_c = UserNewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserNewForm\");","map":{"version":3,"sources":["/Users/pongsiri.an/Documents/GitHub/Valenta-front-end/src/sections/auth/register/RegisterForm.tsx"],"names":["Yup","useCallback","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","fData","PATH_DASHBOARD","countries","UploadAvatar","UserNewForm","navigate","enqueueSnackbar","NewUserSchema","object","shape","name","string","required","email","phoneNumber","address","country","company","state","city","role","avatarUrl","mixed","formik","enableReinitialize","initialValues","zipCode","isVerified","status","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","Promise","resolve","setTimeout","user","list","error","console","message","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","handleDrop","acceptedFiles","file","preview","URL","createObjectURL","py","px","mb","Boolean","mt","mx","display","textAlign","color","width","justifyContent","p","xs","sm","native","map","option","label","code"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// @mui\nimport { LoadingButton } from '@mui/lab';\nimport {\n  Box,\n  Card,\n  Grid,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n  FormHelperText,\n  FormControlLabel,\n} from '@mui/material';\n// utils\nimport { fData } from '../../../utils/formatNumber';\n// routes\nimport { PATH_DASHBOARD } from '../../../routes/paths';\n// @types\nimport { UserManager } from '../../../@types/user';\n// _mock\nimport { countries } from '../../../_mock';\n// components\nimport Label from '../../../components/Label';\nimport { UploadAvatar } from '../../../components/upload';\nimport { string } from 'yup/lib/locale';\n\n// ----------------------------------------------------------------------\ntype initialValues = {\n  name: string,\n  email: string,\n  phoneNumber: string,\n  address: string,\n  country: string,\n  state:string,\n  city:string,\n  zipCode:string,\n  avatarUrl:string,\n  isVerified:string,\n  status: string,\n  company:string,\n  role:string\n}\n\nexport default function UserNewForm() {\n  const navigate = useNavigate();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const NewUserSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    email: Yup.string().required('Email is required').email(),\n    phoneNumber: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    country: Yup.string().required('country is required'),\n    company: Yup.string().required('Company is required'),\n    state: Yup.string().required('State is required'),\n    city: Yup.string().required('City is required'),\n    role: Yup.string().required('Role Number is required'),\n    avatarUrl: Yup.mixed().required('Avatar is required'),\n  });\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      name: '',\n      email: '',\n      phoneNumber: '',\n      address: '',\n      country: '',\n      state: '',\n      city: '',\n      zipCode: '',\n      avatarUrl: '',\n      isVerified: '',\n      status: '',\n      company: '',\n      role: ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\n      try {\n        await new Promise((resolve) => setTimeout(resolve, 500));\n        resetForm();\n        setSubmitting(false);\n        // enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\n        navigate(PATH_DASHBOARD.user.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error.message);\n      }\n    },\n  });\n\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } =\n    formik;\n\n  const handleDrop = useCallback(\n    (acceptedFiles) => {\n      const file = acceptedFiles[0];\n      if (file) {\n        setFieldValue('avatarUrl', {\n          ...file,\n          preview: URL.createObjectURL(file),\n        });\n      }\n    },\n    [setFieldValue]\n  );\n\n  return (\n    <FormikProvider value={formik}>\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={4}>\n            <Card sx={{ py: 10, px: 3 }}>\n              {/* {isEdit && (\n                <Label\n                  color={values.status !== 'active' ? 'error' : 'success'}\n                  sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\n                >\n                  {values.status}\n                </Label>\n              )} */}\n\n              <Box sx={{ mb: 5 }}>\n                <UploadAvatar\n                  accept=\"image/*\"\n                  file={values.avatarUrl}\n                  maxSize={3145728}\n                  onDrop={handleDrop}\n                  error={Boolean(touched.avatarUrl && errors.avatarUrl)}\n                  caption={\n                    <Typography\n                      variant=\"caption\"\n                      sx={{\n                        mt: 2,\n                        mx: 'auto',\n                        display: 'block',\n                        textAlign: 'center',\n                        color: 'text.secondary',\n                      }}\n                    >\n                      Allowed *.jpeg, *.jpg, *.png, *.gif\n                      <br /> max size of {fData(3145728)}\n                    </Typography>\n                  }\n                />\n                <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\n                  {touched.avatarUrl && errors.avatarUrl}\n                </FormHelperText>\n              </Box>\n\n              {/* {isEdit && (\n                <FormControlLabel\n                  labelPlacement=\"start\"\n                  control={\n                    <Switch\n                      onChange={(event) =>\n                        setFieldValue('status', event.target.checked ? 'banned' : 'active')\n                      }\n                      checked={values.status !== 'active'}\n                    />\n                  }\n                  label={\n                    <>\n                      <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                        Banned\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                        Apply disable account\n                      </Typography>\n                    </>\n                  }\n                  sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\n                />\n              )} */}\n\n              <FormControlLabel\n                labelPlacement=\"start\"\n                control={<Switch {...getFieldProps('isVerified')} checked={values.isVerified} />}\n                label={\n                  <>\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\n                      Email Verified\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n                      Disabling this will automatically send the user a verification email\n                    </Typography>\n                  </>\n                }\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\n              />\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} md={8}>\n            <Card sx={{ p: 3 }}>\n              <Stack spacing={3}>\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Full Name\"\n                    {...getFieldProps('name')}\n                    error={Boolean(touched.name && errors.name)}\n                    helperText={touched.name && errors.name}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Email Address\"\n                    {...getFieldProps('email')}\n                    error={Boolean(touched.email && errors.email)}\n                    helperText={touched.email && errors.email}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Phone Number\"\n                    {...getFieldProps('phoneNumber')}\n                    error={Boolean(touched.phoneNumber && errors.phoneNumber)}\n                    helperText={touched.phoneNumber && errors.phoneNumber}\n                  />\n                  <TextField\n                    select\n                    fullWidth\n                    label=\"Country\"\n                    placeholder=\"Country\"\n                    {...getFieldProps('country')}\n                    SelectProps={{ native: true }}\n                    error={Boolean(touched.country && errors.country)}\n                    helperText={touched.country && errors.country}\n                  >\n                    <option value=\"\" />\n                    {countries.map((option) => (\n                      <option key={option.code} value={option.label}>\n                        {option.label}\n                      </option>\n                    ))}\n                  </TextField>\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"State/Region\"\n                    {...getFieldProps('state')}\n                    error={Boolean(touched.state && errors.state)}\n                    helperText={touched.state && errors.state}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"City\"\n                    {...getFieldProps('city')}\n                    error={Boolean(touched.city && errors.city)}\n                    helperText={touched.city && errors.city}\n                  />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Address\"\n                    {...getFieldProps('address')}\n                    error={Boolean(touched.address && errors.address)}\n                    helperText={touched.address && errors.address}\n                  />\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\n                </Stack>\n\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\n                  <TextField\n                    fullWidth\n                    label=\"Company\"\n                    {...getFieldProps('company')}\n                    error={Boolean(touched.company && errors.company)}\n                    helperText={touched.company && errors.company}\n                  />\n                  <TextField\n                    fullWidth\n                    label=\"Role\"\n                    {...getFieldProps('role')}\n                    error={Boolean(touched.role && errors.role)}\n                    helperText={touched.role && errors.role}\n                  />\n                </Stack>\n\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n                    {/* {!isEdit ? 'Create User' : 'Save Changes'} */}\n                  </LoadingButton>\n                </Box>\n              </Stack>\n            </Card>\n          </Grid>\n        </Grid>\n      </Form>\n    </FormikProvider>\n  );\n}\n\n\n// import * as Yup from 'yup';\n// import { useState } from 'react';\n// import { useSnackbar } from 'notistack';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// // @mui\n// import { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // hooks\n// import useAuth from '../../../hooks/useAuth';\n// import useIsMountedRef from '../../../hooks/useIsMountedRef';\n// // components\n// import Iconify from '../../../components/Iconify';\n// import { IconButtonAnimate } from '../../../components/animate';\n\n// // ----------------------------------------------------------------------\n\n// type InitialValues = {\n//   email: string;\n//   password: string;\n//   firstName: string;\n//   lastName: string;\n//   afterSubmit?: string;\n// };\n\n// export default function RegisterForm() {\n//   const { register } = useAuth();\n//   const isMountedRef = useIsMountedRef();\n//   const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(50, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required'),\n//   });\n\n//   const formik = useFormik<InitialValues>({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       email: '',\n//       password: '',\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: async (values, { setErrors, setSubmitting }) => {\n//       try {\n//         await register(values.email, values.password, values.firstName, values.lastName);\n//         enqueueSnackbar('Register success', {\n//           variant: 'success',\n//           action: (key) => (\n//             <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n//               <Iconify icon={'eva:close-fill'} />\n//             </IconButtonAnimate>\n//           ),\n//         });\n//         if (isMountedRef.current) {\n//           setSubmitting(false);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         if (isMountedRef.current) {\n//           setErrors({ afterSubmit: error.message });\n//           setSubmitting(false);\n//         }\n//       }\n//     },\n//   });\n\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"username\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             {...getFieldProps('email')}\n//             error={Boolean(touched.email && errors.email)}\n//             helperText={touched.email && errors.email}\n//           />\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"current-password\"\n//             type={showPassword ? 'text' : 'password'}\n//             label=\"Password\"\n//             {...getFieldProps('password')}\n//             InputProps={{\n//               endAdornment: (\n//                 <InputAdornment position=\"end\">\n//                   <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n//                     <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n//                   </IconButton>\n//                 </InputAdornment>\n//               ),\n//             }}\n//             error={Boolean(touched.password && errors.password)}\n//             helperText={touched.password && errors.password}\n//           />\n\n//           <LoadingButton\n//             fullWidth\n//             size=\"large\"\n//             type=\"submit\"\n//             variant=\"contained\"\n//             loading={isSubmitting}\n//           >\n//             Register\n//           </LoadingButton>\n//         </Stack>\n//       </Form>\n//     </FormikProvider>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}