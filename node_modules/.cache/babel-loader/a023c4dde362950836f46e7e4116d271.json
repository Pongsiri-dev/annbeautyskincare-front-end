{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/map/interaction/ControlPanel.tsx\";\nimport { memo } from 'react'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Box, Switch, InputBase, Typography } from '@mui/material'; // @types\n\n// utils\nimport cssStyles from '../../../utils/cssStyles'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return { ...cssStyles().bgBlur({\n      color: theme.palette.grey[900]\n    }),\n    zIndex: 9,\n    minWidth: 200,\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    padding: theme.spacing(2),\n    borderRadius: theme.shape.borderRadius\n  };\n});\nconst RowStyle = styled('div')(_ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return {\n    display: 'flex',\n    alignItems: 'center',\n    textTransform: 'capitalize',\n    justifyContent: 'space-between',\n    color: theme.palette.common.white,\n    '&:not(:last-of-type)': {\n      marginBottom: theme.spacing(1)\n    }\n  };\n}); // ----------------------------------------------------------------------\n\nconst EVENTS = [{\n  label: 'Dragging',\n  value: 'isDragging'\n}, {\n  label: 'Transition',\n  value: 'inTransition'\n}, {\n  label: 'Panning',\n  value: 'isPanning'\n}, {\n  label: 'Rotating',\n  value: 'isRotating'\n}, {\n  label: 'Zooming',\n  value: 'isZooming'\n}];\nconst camelPattern = /(^|[A-Z])[a-z]*/g;\n\nfunction formatSettingName(name) {\n  var _name$match;\n\n  return (_name$match = name.match(camelPattern)) === null || _name$match === void 0 ? void 0 : _name$match.join(' ');\n}\n\nfunction ControlPanel(_ref3) {\n  let {\n    settings,\n    interactionState,\n    onChange\n  } = _ref3;\n\n  const renderSetting = (name, value) => {\n    switch (typeof value) {\n      case 'boolean':\n        return /*#__PURE__*/_jsxDEV(RowStyle, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: formatSettingName(name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            size: \"small\",\n            checked: value,\n            onChange: event => onChange(name, event.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this);\n\n      case 'number':\n        return /*#__PURE__*/_jsxDEV(RowStyle, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: formatSettingName(name)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputBase, {\n            value: value,\n            onChange: event => onChange(name, Number(event.target.value)),\n            inputProps: {\n              type: 'number'\n            },\n            sx: {\n              '& input': {\n                py: 0.25,\n                width: 40,\n                fontSize: 14,\n                borderRadius: 0.5,\n                textAlign: 'center',\n                bgcolor: 'grey.50012',\n                color: 'common.white'\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    children: [Object.keys(settings).map(name => renderSetting(name, settings[name])), EVENTS.map(event => /*#__PURE__*/_jsxDEV(RowStyle, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: event.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          width: 22,\n          height: 22,\n          borderRadius: 1,\n          bgcolor: interactionState[event.value] ? 'primary.main' : 'error.main'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, event.label, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\nexport default /*#__PURE__*/memo(ControlPanel);","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/sections/map/interaction/ControlPanel.tsx"],"names":["memo","styled","Box","Switch","InputBase","Typography","cssStyles","RootStyle","theme","bgBlur","color","palette","grey","zIndex","minWidth","position","top","spacing","right","padding","borderRadius","shape","RowStyle","display","alignItems","textTransform","justifyContent","common","white","marginBottom","EVENTS","label","value","camelPattern","formatSettingName","name","match","join","ControlPanel","settings","interactionState","onChange","renderSetting","event","target","checked","Number","type","py","width","fontSize","textAlign","bgcolor","Object","keys","map","height"],"mappings":";AAAA,SAASA,IAAT,QAAqB,OAArB,C,CACA;;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,eAAnD,C,CACA;;AAEA;AACA,OAAOC,SAAP,MAAsB,0BAAtB,C,CAEA;;;AAEA,MAAMC,SAAS,GAAGN,MAAM,CAAC,KAAD,CAAN,CAAc;AAAA,MAAC;AAAEO,IAAAA;AAAF,GAAD;AAAA,SAAgB,EAC9C,GAAGF,SAAS,GAAGG,MAAZ,CAAmB;AAAEC,MAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AAAT,KAAnB,CAD2C;AAE9CC,IAAAA,MAAM,EAAE,CAFsC;AAG9CC,IAAAA,QAAQ,EAAE,GAHoC;AAI9CC,IAAAA,QAAQ,EAAE,UAJoC;AAK9CC,IAAAA,GAAG,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,CALyC;AAM9CC,IAAAA,KAAK,EAAEV,KAAK,CAACS,OAAN,CAAc,CAAd,CANuC;AAO9CE,IAAAA,OAAO,EAAEX,KAAK,CAACS,OAAN,CAAc,CAAd,CAPqC;AAQ9CG,IAAAA,YAAY,EAAEZ,KAAK,CAACa,KAAN,CAAYD;AARoB,GAAhB;AAAA,CAAd,CAAlB;AAWA,MAAME,QAAQ,GAAGrB,MAAM,CAAC,KAAD,CAAN,CAAc;AAAA,MAAC;AAAEO,IAAAA;AAAF,GAAD;AAAA,SAAgB;AAC7Ce,IAAAA,OAAO,EAAE,MADoC;AAE7CC,IAAAA,UAAU,EAAE,QAFiC;AAG7CC,IAAAA,aAAa,EAAE,YAH8B;AAI7CC,IAAAA,cAAc,EAAE,eAJ6B;AAK7ChB,IAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcgB,MAAd,CAAqBC,KALiB;AAM7C,4BAAwB;AACtBC,MAAAA,YAAY,EAAErB,KAAK,CAACS,OAAN,CAAc,CAAd;AADQ;AANqB,GAAhB;AAAA,CAAd,CAAjB,C,CAWA;;AAEA,MAAMa,MAAM,GAAG,CACb;AAAEC,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,KAAK,EAAE;AAA5B,CADa,EAEb;AAAED,EAAAA,KAAK,EAAE,YAAT;AAAuBC,EAAAA,KAAK,EAAE;AAA9B,CAFa,EAGb;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CAHa,EAIb;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,KAAK,EAAE;AAA5B,CAJa,EAKb;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CALa,CAAf;AAQA,MAAMC,YAAY,GAAG,kBAArB;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAyC;AAAA;;AACvC,wBAAOA,IAAI,CAACC,KAAL,CAAWH,YAAX,CAAP,gDAAO,YAA0BI,IAA1B,CAA+B,GAA/B,CAAP;AACD;;AAQD,SAASC,YAAT,QAAmF;AAAA,MAA7D;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,gBAAZ;AAA8BC,IAAAA;AAA9B,GAA6D;;AACjF,QAAMC,aAAa,GAAG,CAACP,IAAD,EAAuBH,KAAvB,KAAmD;AACvE,YAAQ,OAAOA,KAAf;AACE,WAAK,SAAL;AACE,4BACE,QAAC,QAAD;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAAA,sBAA6BE,iBAAiB,CAACC,IAAD;AAA9C;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,OAAO,EAAEH,KAFX;AAGE,YAAA,QAAQ,EAAGW,KAAD,IAAWF,QAAQ,CAACN,IAAD,EAAOQ,KAAK,CAACC,MAAN,CAAaC,OAApB;AAH/B;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAeV,IAAf;AAAA;AAAA;AAAA;AAAA,gBADF;;AAUF,WAAK,QAAL;AACE,4BACE,QAAC,QAAD;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAAA,sBAA6BD,iBAAiB,CAACC,IAAD;AAA9C;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AACE,YAAA,KAAK,EAAEH,KADT;AAEE,YAAA,QAAQ,EAAGW,KAAD,IAAWF,QAAQ,CAACN,IAAD,EAAOW,MAAM,CAACH,KAAK,CAACC,MAAN,CAAaZ,KAAd,CAAb,CAF/B;AAGE,YAAA,UAAU,EAAE;AAAEe,cAAAA,IAAI,EAAE;AAAR,aAHd;AAIE,YAAA,EAAE,EAAE;AACF,yBAAW;AACTC,gBAAAA,EAAE,EAAE,IADK;AAETC,gBAAAA,KAAK,EAAE,EAFE;AAGTC,gBAAAA,QAAQ,EAAE,EAHD;AAIT9B,gBAAAA,YAAY,EAAE,GAJL;AAKT+B,gBAAAA,SAAS,EAAE,QALF;AAMTC,gBAAAA,OAAO,EAAE,YANA;AAOT1C,gBAAAA,KAAK,EAAE;AAPE;AADT;AAJN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAeyB,IAAf;AAAA;AAAA;AAAA;AAAA,gBADF;;AAqBF;AACE,eAAO,IAAP;AAnCJ;AAqCD,GAtCD;;AAwCA,sBACE,QAAC,SAAD;AAAA,eACGkB,MAAM,CAACC,IAAP,CAAYf,QAAZ,EAAsBgB,GAAtB,CAA2BpB,IAAD,IACzBO,aAAa,CAACP,IAAD,EAAyBI,QAAQ,CAACJ,IAAD,CAAjC,CADd,CADH,EAKGL,MAAM,CAACyB,GAAP,CAAYZ,KAAD,iBACV,QAAC,QAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,OAApB;AAAA,kBAA6BA,KAAK,CAACZ;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,GAAD;AACE,QAAA,EAAE,EAAE;AACFkB,UAAAA,KAAK,EAAE,EADL;AAEFO,UAAAA,MAAM,EAAE,EAFN;AAGFpC,UAAAA,YAAY,EAAE,CAHZ;AAIFgC,UAAAA,OAAO,EAAEZ,gBAAgB,CAACG,KAAK,CAACX,KAAP,CAAhB,GAAgC,cAAhC,GAAiD;AAJxD;AADN;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAeW,KAAK,CAACZ,KAArB;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;AAED,4BAAe/B,IAAI,CAACsC,YAAD,CAAnB","sourcesContent":["import { memo } from 'react';\n// @mui\nimport { styled } from '@mui/material/styles';\nimport { Box, Switch, InputBase, Typography } from '@mui/material';\n// @types\nimport { MapSettingKeys, MapSettings } from '../../../components/map/type';\n// utils\nimport cssStyles from '../../../utils/cssStyles';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled('div')(({ theme }) => ({\n  ...cssStyles().bgBlur({ color: theme.palette.grey[900] }),\n  zIndex: 9,\n  minWidth: 200,\n  position: 'absolute',\n  top: theme.spacing(1),\n  right: theme.spacing(1),\n  padding: theme.spacing(2),\n  borderRadius: theme.shape.borderRadius,\n}));\n\nconst RowStyle = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  textTransform: 'capitalize',\n  justifyContent: 'space-between',\n  color: theme.palette.common.white,\n  '&:not(:last-of-type)': {\n    marginBottom: theme.spacing(1),\n  },\n}));\n\n// ----------------------------------------------------------------------\n\nconst EVENTS = [\n  { label: 'Dragging', value: 'isDragging' },\n  { label: 'Transition', value: 'inTransition' },\n  { label: 'Panning', value: 'isPanning' },\n  { label: 'Rotating', value: 'isRotating' },\n  { label: 'Zooming', value: 'isZooming' },\n];\n\nconst camelPattern = /(^|[A-Z])[a-z]*/g;\n\nfunction formatSettingName(name: string) {\n  return name.match(camelPattern)?.join(' ');\n}\n\ntype ControlPanelProps = {\n  settings: MapSettings;\n  interactionState: any;\n  onChange: (name: MapSettingKeys, value: boolean | number) => void;\n};\n\nfunction ControlPanel({ settings, interactionState, onChange }: ControlPanelProps) {\n  const renderSetting = (name: MapSettingKeys, value: boolean | number) => {\n    switch (typeof value) {\n      case 'boolean':\n        return (\n          <RowStyle key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <Switch\n              size=\"small\"\n              checked={value}\n              onChange={(event) => onChange(name, event.target.checked)}\n            />\n          </RowStyle>\n        );\n      case 'number':\n        return (\n          <RowStyle key={name}>\n            <Typography variant=\"body2\">{formatSettingName(name)}</Typography>\n            <InputBase\n              value={value}\n              onChange={(event) => onChange(name, Number(event.target.value))}\n              inputProps={{ type: 'number' }}\n              sx={{\n                '& input': {\n                  py: 0.25,\n                  width: 40,\n                  fontSize: 14,\n                  borderRadius: 0.5,\n                  textAlign: 'center',\n                  bgcolor: 'grey.50012',\n                  color: 'common.white',\n                },\n              }}\n            />\n          </RowStyle>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <RootStyle>\n      {Object.keys(settings).map((name) =>\n        renderSetting(name as MapSettingKeys, settings[name as MapSettingKeys])\n      )}\n\n      {EVENTS.map((event) => (\n        <RowStyle key={event.label}>\n          <Typography variant=\"body2\">{event.label}</Typography>\n          <Box\n            sx={{\n              width: 22,\n              height: 22,\n              borderRadius: 1,\n              bgcolor: interactionState[event.value] ? 'primary.main' : 'error.main',\n            }}\n          />\n        </RowStyle>\n      ))}\n    </RootStyle>\n  );\n}\n\nexport default memo(ControlPanel);\n"]},"metadata":{},"sourceType":"module"}