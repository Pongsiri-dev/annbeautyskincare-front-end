{"ast":null,"code":"// import * as Yup from 'yup';\n// import { useState } from 'react';\n// import { useSnackbar } from 'notistack';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// // @mui\n// import { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // hooks\n// import useAuth from '../../../hooks/useAuth';\n// import useIsMountedRef from '../../../hooks/useIsMountedRef';\n// // components\n// import Iconify from '../../../components/Iconify';\n// import { IconButtonAnimate } from '../../../components/animate';\n// // ----------------------------------------------------------------------\n// type InitialValues = {\n//   email: string;\n//   password: string;\n//   firstName: string;\n//   lastName: string;\n//   afterSubmit?: string;\n// };\n// export default function RegisterForm() {\n//   const { register } = useAuth();\n//   const isMountedRef = useIsMountedRef();\n//   const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n//   const [showPassword, setShowPassword] = useState(false);\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(50, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required'),\n//   });\n//   const formik = useFormik<InitialValues>({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       email: '',\n//       password: '',\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: async (values, { setErrors, setSubmitting }) => {\n//       try {\n//         await register(values.email, values.password, values.firstName, values.lastName);\n//         enqueueSnackbar('Register success', {\n//           variant: 'success',\n//           action: (key) => (\n//             <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n//               <Iconify icon={'eva:close-fill'} />\n//             </IconButtonAnimate>\n//           ),\n//         });\n//         if (isMountedRef.current) {\n//           setSubmitting(false);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         if (isMountedRef.current) {\n//           setErrors({ afterSubmit: error.message });\n//           setSubmitting(false);\n//         }\n//       }\n//     },\n//   });\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n//           <TextField\n//             fullWidth\n//             autoComplete=\"username\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             {...getFieldProps('email')}\n//             error={Boolean(touched.email && errors.email)}\n//             helperText={touched.email && errors.email}\n//           />\n//           <TextField\n//             fullWidth\n//             autoComplete=\"current-password\"\n//             type={showPassword ? 'text' : 'password'}\n//             label=\"Password\"\n//             {...getFieldProps('password')}\n//             InputProps={{\n//               endAdornment: (\n//                 <InputAdornment position=\"end\">\n//                   <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n//                     <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n//                   </IconButton>\n//                 </InputAdornment>\n//               ),\n//             }}\n//             error={Boolean(touched.password && errors.password)}\n//             helperText={touched.password && errors.password}\n//           />\n//           <LoadingButton\n//             fullWidth\n//             size=\"large\"\n//             type=\"submit\"\n//             variant=\"contained\"\n//             loading={isSubmitting}\n//           >\n//             Register\n//           </LoadingButton>\n//         </Stack>\n//       </Form>\n//     </FormikProvider>\n//   );\n// }","map":{"version":3,"sources":["/Users/pongsiri.an/Documents/GitHub/Valenta-front-end/src/sections/auth/register/RegisterForm.tsx"],"names":[],"mappingssourcesContent":["// import * as Yup from 'yup';\n// import { useState } from 'react';\n// import { useSnackbar } from 'notistack';\n// import { useFormik, Form, FormikProvider } from 'formik';\n// // @mui\n// import { Stack, TextField, IconButton, InputAdornment, Alert } from '@mui/material';\n// import { LoadingButton } from '@mui/lab';\n// // hooks\n// import useAuth from '../../../hooks/useAuth';\n// import useIsMountedRef from '../../../hooks/useIsMountedRef';\n// // components\n// import Iconify from '../../../components/Iconify';\n// import { IconButtonAnimate } from '../../../components/animate';\n\n// // ----------------------------------------------------------------------\n\n// type InitialValues = {\n//   email: string;\n//   password: string;\n//   firstName: string;\n//   lastName: string;\n//   afterSubmit?: string;\n// };\n\n// export default function RegisterForm() {\n//   const { register } = useAuth();\n//   const isMountedRef = useIsMountedRef();\n//   const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n//   const [showPassword, setShowPassword] = useState(false);\n\n//   const RegisterSchema = Yup.object().shape({\n//     firstName: Yup.string()\n//       .min(2, 'Too Short!')\n//       .max(50, 'Too Long!')\n//       .required('First name required'),\n//     lastName: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Last name required'),\n//     email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n//     password: Yup.string().required('Password is required'),\n//   });\n\n//   const formik = useFormik<InitialValues>({\n//     initialValues: {\n//       firstName: '',\n//       lastName: '',\n//       email: '',\n//       password: '',\n//     },\n//     validationSchema: RegisterSchema,\n//     onSubmit: async (values, { setErrors, setSubmitting }) => {\n//       try {\n//         await register(values.email, values.password, values.firstName, values.lastName);\n//         enqueueSnackbar('Register success', {\n//           variant: 'success',\n//           action: (key) => (\n//             <IconButtonAnimate size=\"small\" onClick={() => closeSnackbar(key)}>\n//               <Iconify icon={'eva:close-fill'} />\n//             </IconButtonAnimate>\n//           ),\n//         });\n//         if (isMountedRef.current) {\n//           setSubmitting(false);\n//         }\n//       } catch (error) {\n//         console.error(error);\n//         if (isMountedRef.current) {\n//           setErrors({ afterSubmit: error.message });\n//           setSubmitting(false);\n//         }\n//       }\n//     },\n//   });\n\n//   const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n//   return (\n//     <FormikProvider value={formik}>\n//       <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n//         <Stack spacing={3}>\n//           {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n//           <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\n//             <TextField\n//               fullWidth\n//               label=\"First name\"\n//               {...getFieldProps('firstName')}\n//               error={Boolean(touched.firstName && errors.firstName)}\n//               helperText={touched.firstName && errors.firstName}\n//             />\n\n//             <TextField\n//               fullWidth\n//               label=\"Last name\"\n//               {...getFieldProps('lastName')}\n//               error={Boolean(touched.lastName && errors.lastName)}\n//               helperText={touched.lastName && errors.lastName}\n//             />\n//           </Stack>\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"username\"\n//             type=\"email\"\n//             label=\"Email address\"\n//             {...getFieldProps('email')}\n//             error={Boolean(touched.email && errors.email)}\n//             helperText={touched.email && errors.email}\n//           />\n\n//           <TextField\n//             fullWidth\n//             autoComplete=\"current-password\"\n//             type={showPassword ? 'text' : 'password'}\n//             label=\"Password\"\n//             {...getFieldProps('password')}\n//             InputProps={{\n//               endAdornment: (\n//                 <InputAdornment position=\"end\">\n//                   <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n//                     <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\n//                   </IconButton>\n//                 </InputAdornment>\n//               ),\n//             }}\n//             error={Boolean(touched.password && errors.password)}\n//             helperText={touched.password && errors.password}\n//           />\n\n//           <LoadingButton\n//             fullWidth\n//             size=\"large\"\n//             type=\"submit\"\n//             variant=\"contained\"\n//             loading={isSubmitting}\n//           >\n//             Register\n//           </LoadingButton>\n//         </Stack>\n//       </Form>\n//     </FormikProvider>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}