{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { omit } from 'lodash'; // utils\n\nimport axios from '../../utils/axios'; // @types\n\n//\nimport { dispatch } from '../store'; // ----------------------------------------------------------------------\n\nfunction objFromArray(array) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'id';\n  return array.reduce((accumulator, current) => {\n    accumulator[current[key]] = current;\n    return accumulator;\n  }, {});\n}\n\nconst initialState = {\n  isLoading: false,\n  error: null,\n  board: {\n    cards: {},\n    columns: {},\n    columnOrder: []\n  }\n};\nconst slice = createSlice({\n  name: 'kanban',\n  initialState,\n  reducers: {\n    // START LOADING\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    // HAS ERROR\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // GET BOARD\n    getBoardSuccess(state, action) {\n      state.isLoading = false;\n      const board = action.payload;\n      const cards = objFromArray(board.cards);\n      const columns = objFromArray(board.columns);\n      const {\n        columnOrder\n      } = board;\n      state.board = {\n        cards,\n        columns,\n        columnOrder\n      };\n    },\n\n    // CREATE NEW COLUMN\n    createColumnSuccess(state, action) {\n      const newColumn = action.payload;\n      state.isLoading = false;\n      state.board.columns = { ...state.board.columns,\n        [newColumn.id]: newColumn\n      };\n      state.board.columnOrder.push(newColumn.id);\n    },\n\n    persistCard(state, action) {\n      const columns = action.payload;\n      state.board.columns = columns;\n    },\n\n    persistColumn(state, action) {\n      state.board.columnOrder = action.payload;\n    },\n\n    addTask(state, action) {\n      const {\n        card,\n        columnId\n      } = action.payload;\n      state.board.cards[card.id] = card;\n      state.board.columns[columnId].cardIds.push(card.id);\n    },\n\n    deleteTask(state, action) {\n      const {\n        cardId,\n        columnId\n      } = action.payload;\n      state.board.columns[columnId].cardIds = state.board.columns[columnId].cardIds.filter(id => id !== cardId);\n      state.board.cards = omit(state.board.cards, [cardId]);\n    },\n\n    // UPDATE COLUMN\n    updateColumnSuccess(state, action) {\n      const column = action.payload;\n      state.isLoading = false;\n      state.board.columns[column.id] = column;\n    },\n\n    // DELETE COLUMN\n    deleteColumnSuccess(state, action) {\n      const {\n        columnId\n      } = action.payload;\n      const deletedColumn = state.board.columns[columnId];\n      state.isLoading = false;\n      state.board.columns = omit(state.board.columns, [columnId]);\n      state.board.cards = omit(state.board.cards, [...deletedColumn.cardIds]);\n      state.board.columnOrder = state.board.columnOrder.filter(c => c !== columnId);\n    }\n\n  }\n}); // Reducer\n\nexport default slice.reducer;\nexport const {\n  actions\n} = slice; // ----------------------------------------------------------------------\n\nexport function getBoard() {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/kanban/board');\n      dispatch(slice.actions.getBoardSuccess(response.data.board));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function createColumn(newColumn) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.post('/api/kanban/columns/new', newColumn);\n      dispatch(slice.actions.createColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function updateColumn(columnId, updateColumn) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.post('/api/kanban/columns/update', {\n        columnId,\n        updateColumn\n      });\n      dispatch(slice.actions.updateColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function deleteColumn(columnId) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      await axios.post('/api/kanban/columns/delete', {\n        columnId\n      });\n      dispatch(slice.actions.deleteColumnSuccess({\n        columnId\n      }));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function persistColumn(newColumnOrder) {\n  return () => {\n    dispatch(slice.actions.persistColumn(newColumnOrder));\n  };\n} // ----------------------------------------------------------------------\n\nexport function persistCard(columns) {\n  return () => {\n    dispatch(slice.actions.persistCard(columns));\n  };\n} // ----------------------------------------------------------------------\n\nexport function addTask(_ref) {\n  let {\n    card,\n    columnId\n  } = _ref;\n  return () => {\n    dispatch(slice.actions.addTask({\n      card,\n      columnId\n    }));\n  };\n} // ----------------------------------------------------------------------\n\nexport function deleteTask(_ref2) {\n  let {\n    cardId,\n    columnId\n  } = _ref2;\n  return () => {\n    dispatch(slice.actions.deleteTask({\n      cardId,\n      columnId\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/redux/slices/kanban.ts"],"names":["createSlice","omit","axios","dispatch","objFromArray","array","key","reduce","accumulator","current","initialState","isLoading","error","board","cards","columns","columnOrder","slice","name","reducers","startLoading","state","hasError","action","payload","getBoardSuccess","createColumnSuccess","newColumn","id","push","persistCard","persistColumn","addTask","card","columnId","cardIds","deleteTask","cardId","filter","updateColumnSuccess","column","deleteColumnSuccess","deletedColumn","c","reducer","actions","getBoard","response","get","data","createColumn","post","updateColumn","deleteColumn","newColumnOrder"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { omit } from 'lodash';\n// utils\nimport axios from '../../utils/axios';\n// @types\nimport { KanbanCard, KanbanColumn } from '../../@types/kanban';\n//\nimport { dispatch } from '../store';\n\n// ----------------------------------------------------------------------\n\nfunction objFromArray<Type extends Record<string, any>>(array: Type[], key: string = 'id') {\n  return array.reduce<Record<string, Type>>((accumulator, current) => {\n    accumulator[current[key]] = current;\n    return accumulator;\n  }, {});\n}\n\ntype InitialState = {\n  isLoading: boolean;\n  error: Error | string | null;\n  board: {\n    cards: Record<string, KanbanCard>;\n    columns: Record<string, KanbanColumn>;\n    columnOrder: string[];\n  };\n};\n\nconst initialState: InitialState = {\n  isLoading: false,\n  error: null,\n  board: {\n    cards: {},\n    columns: {},\n    columnOrder: [],\n  },\n};\n\nconst slice = createSlice({\n  name: 'kanban',\n  initialState,\n  reducers: {\n    // START LOADING\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    // HAS ERROR\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // GET BOARD\n    getBoardSuccess(state, action) {\n      state.isLoading = false;\n      const board = action.payload;\n      const cards = objFromArray<KanbanCard>(board.cards);\n      const columns = objFromArray<KanbanColumn>(board.columns);\n      const { columnOrder } = board;\n      state.board = {\n        cards,\n        columns,\n        columnOrder,\n      };\n    },\n\n    // CREATE NEW COLUMN\n    createColumnSuccess(state, action) {\n      const newColumn = action.payload;\n      state.isLoading = false;\n      state.board.columns = {\n        ...state.board.columns,\n        [newColumn.id]: newColumn,\n      };\n      state.board.columnOrder.push(newColumn.id);\n    },\n\n    persistCard(state, action) {\n      const columns = action.payload;\n      state.board.columns = columns;\n    },\n\n    persistColumn(state, action) {\n      state.board.columnOrder = action.payload;\n    },\n\n    addTask(state, action) {\n      const { card, columnId } = action.payload;\n\n      state.board.cards[card.id] = card;\n      state.board.columns[columnId].cardIds.push(card.id);\n    },\n\n    deleteTask(state, action) {\n      const { cardId, columnId } = action.payload;\n\n      state.board.columns[columnId].cardIds = state.board.columns[columnId].cardIds.filter(\n        (id) => id !== cardId\n      );\n\n      state.board.cards = omit(state.board.cards, [cardId]);\n    },\n\n    // UPDATE COLUMN\n    updateColumnSuccess(state, action) {\n      const column = action.payload;\n\n      state.isLoading = false;\n      state.board.columns[column.id] = column;\n    },\n\n    // DELETE COLUMN\n    deleteColumnSuccess(state, action) {\n      const { columnId } = action.payload;\n      const deletedColumn = state.board.columns[columnId];\n\n      state.isLoading = false;\n      state.board.columns = omit(state.board.columns, [columnId]);\n      state.board.cards = omit(state.board.cards, [...deletedColumn.cardIds]);\n      state.board.columnOrder = state.board.columnOrder.filter((c) => c !== columnId);\n    },\n  },\n});\n\n// Reducer\nexport default slice.reducer;\n\nexport const { actions } = slice;\n\n// ----------------------------------------------------------------------\n\nexport function getBoard() {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.get('/api/kanban/board');\n      dispatch(slice.actions.getBoardSuccess(response.data.board));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function createColumn(newColumn: { name: string }) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.post('/api/kanban/columns/new', newColumn);\n      dispatch(slice.actions.createColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function updateColumn(columnId: string, updateColumn: KanbanColumn) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      const response = await axios.post('/api/kanban/columns/update', {\n        columnId,\n        updateColumn,\n      });\n      dispatch(slice.actions.updateColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function deleteColumn(columnId: string) {\n  return async () => {\n    dispatch(slice.actions.startLoading());\n    try {\n      await axios.post('/api/kanban/columns/delete', { columnId });\n      dispatch(slice.actions.deleteColumnSuccess({ columnId }));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function persistColumn(newColumnOrder: string[]) {\n  return () => {\n    dispatch(slice.actions.persistColumn(newColumnOrder));\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function persistCard(columns: Record<string, KanbanColumn>) {\n  return () => {\n    dispatch(slice.actions.persistCard(columns));\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function addTask({ card, columnId }: { card: Partial<KanbanCard>; columnId: string }) {\n  return () => {\n    dispatch(slice.actions.addTask({ card, columnId }));\n  };\n}\n\n// ----------------------------------------------------------------------\n\nexport function deleteTask({ cardId, columnId }: { cardId: string; columnId: string }) {\n  return () => {\n    dispatch(slice.actions.deleteTask({ cardId, columnId }));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}