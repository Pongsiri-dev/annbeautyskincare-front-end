{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/contexts/JWTContext.tsx\";\nimport { createContext, useEffect, useReducer } from 'react'; // utils\n\nimport axios from '../utils/axios';\nimport { isValidToken, setSession } from '../utils/jwt'; // @types\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ----------------------------------------------------------------------\nvar Types;\n\n(function (Types) {\n  Types[\"Initial\"] = \"INITIALIZE\";\n  Types[\"Login\"] = \"LOGIN\";\n  Types[\"Logout\"] = \"LOGOUT\";\n  Types[\"Register\"] = \"REGISTER\";\n})(Types || (Types = {}));\n\nconst initialState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\n\nconst JWTReducer = (state, action) => {\n  switch (action.type) {\n    case 'INITIALIZE':\n      return {\n        isAuthenticated: action.payload.isAuthenticated,\n        isInitialized: true,\n        user: action.payload.user\n      };\n\n    case 'LOGIN':\n      return { ...state,\n        isAuthenticated: true,\n        user: action.payload.user\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        isAuthenticated: false,\n        user: null\n      };\n\n    case 'REGISTER':\n      return { ...state,\n        isAuthenticated: true,\n        user: action.payload.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst AuthContext = /*#__PURE__*/createContext(null);\n\nfunction AuthProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(JWTReducer, initialState);\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const accessToken = window.localStorage.getItem('accessToken');\n\n        if (accessToken && isValidToken(accessToken)) {\n          setSession(accessToken);\n          const response = await axios.get('/api/account/my-account');\n          const {\n            user\n          } = response.data;\n          dispatch({\n            type: Types.Initial,\n            payload: {\n              isAuthenticated: true,\n              user\n            }\n          });\n        } else {\n          dispatch({\n            type: Types.Initial,\n            payload: {\n              isAuthenticated: false,\n              user: null\n            }\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: Types.Initial,\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email, password) => {\n    const response = await axios.post('/api/account/login', {\n      email,\n      password\n    });\n    const {\n      accessToken,\n      user\n    } = response.data;\n    setSession(accessToken);\n    dispatch({\n      type: Types.Login,\n      payload: {\n        user\n      }\n    });\n  };\n\n  const register = async (email, password, firstName, lastName) => {\n    const response = await axios.post('/api/account/register', {\n      email,\n      password,\n      firstName,\n      lastName\n    });\n    const {\n      accessToken,\n      user\n    } = response.data;\n    window.localStorage.setItem('accessToken', accessToken);\n    dispatch({\n      type: Types.Register,\n      payload: {\n        user\n      }\n    });\n  };\n\n  const logout = async () => {\n    setSession(null);\n    dispatch({\n      type: Types.Logout\n    });\n  };\n\n  const resetPassword = email => console.log(email);\n\n  const updateProfile = () => {};\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: { ...state,\n      method: 'jwt',\n      login,\n      logout,\n      register,\n      resetPassword,\n      updateProfile\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/contexts/JWTContext.tsx"],"names":["createContext","useEffect","useReducer","axios","isValidToken","setSession","Types","initialState","isAuthenticated","isInitialized","user","JWTReducer","state","action","type","payload","AuthContext","AuthProvider","children","dispatch","initialize","accessToken","window","localStorage","getItem","response","get","data","Initial","err","console","error","login","email","password","post","Login","register","firstName","lastName","setItem","Register","logout","Logout","resetPassword","log","updateProfile","method"],"mappings":";AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,UAA9C,QAAgE,OAAhE,C,CACA;;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,cAAzC,C,CACA;;;AAGA;IAEKC,K;;WAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;AAuBL,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,eAAe,EAAE,KADa;AAE9BC,EAAAA,aAAa,EAAE,KAFe;AAG9BC,EAAAA,IAAI,EAAE;AAHwB,CAAhC;;AAMA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAA0C;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO;AACLN,QAAAA,eAAe,EAAEK,MAAM,CAACE,OAAP,CAAeP,eAD3B;AAELC,QAAAA,aAAa,EAAE,IAFV;AAGLC,QAAAA,IAAI,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAHhB,OAAP;;AAKF,SAAK,OAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,eAAe,EAAE,IAFZ;AAGLE,QAAAA,IAAI,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAHhB,OAAP;;AAKF,SAAK,QAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,eAAe,EAAE,KAFZ;AAGLE,QAAAA,IAAI,EAAE;AAHD,OAAP;;AAMF,SAAK,UAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELJ,QAAAA,eAAe,EAAE,IAFZ;AAGLE,QAAAA,IAAI,EAAEG,MAAM,CAACE,OAAP,CAAeL;AAHhB,OAAP;;AAMF;AACE,aAAOE,KAAP;AA5BJ;AA8BD,CA/BD;;AAiCA,MAAMI,WAAW,gBAAGhB,aAAa,CAAwB,IAAxB,CAAjC;;AAEA,SAASiB,YAAT,OAA6D;AAAA,MAAvC;AAAEC,IAAAA;AAAF,GAAuC;AAC3D,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBjB,UAAU,CAACS,UAAD,EAAaJ,YAAb,CAApC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,CAApB;;AAEA,YAAIH,WAAW,IAAIjB,YAAY,CAACiB,WAAD,CAA/B,EAA8C;AAC5ChB,UAAAA,UAAU,CAACgB,WAAD,CAAV;AAEA,gBAAMI,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CAAU,yBAAV,CAAvB;AACA,gBAAM;AAAEhB,YAAAA;AAAF,cAAWe,QAAQ,CAACE,IAA1B;AAEAR,UAAAA,QAAQ,CAAC;AACPL,YAAAA,IAAI,EAAER,KAAK,CAACsB,OADL;AAEPb,YAAAA,OAAO,EAAE;AACPP,cAAAA,eAAe,EAAE,IADV;AAEPE,cAAAA;AAFO;AAFF,WAAD,CAAR;AAOD,SAbD,MAaO;AACLS,UAAAA,QAAQ,CAAC;AACPL,YAAAA,IAAI,EAAER,KAAK,CAACsB,OADL;AAEPb,YAAAA,OAAO,EAAE;AACPP,cAAAA,eAAe,EAAE,KADV;AAEPE,cAAAA,IAAI,EAAE;AAFC;AAFF,WAAD,CAAR;AAOD;AACF,OAzBD,CAyBE,OAAOmB,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAV,QAAAA,QAAQ,CAAC;AACPL,UAAAA,IAAI,EAAER,KAAK,CAACsB,OADL;AAEPb,UAAAA,OAAO,EAAE;AACPP,YAAAA,eAAe,EAAE,KADV;AAEPE,YAAAA,IAAI,EAAE;AAFC;AAFF,SAAD,CAAR;AAOD;AACF,KApCD;;AAsCAU,IAAAA,UAAU;AACX,GAxCQ,EAwCN,EAxCM,CAAT;;AA0CA,QAAMY,KAAK,GAAG,OAAOC,KAAP,EAAsBC,QAAtB,KAA2C;AACvD,UAAMT,QAAQ,GAAG,MAAMtB,KAAK,CAACgC,IAAN,CAAW,oBAAX,EAAiC;AACtDF,MAAAA,KADsD;AAEtDC,MAAAA;AAFsD,KAAjC,CAAvB;AAIA,UAAM;AAAEb,MAAAA,WAAF;AAAeX,MAAAA;AAAf,QAAwBe,QAAQ,CAACE,IAAvC;AAEAtB,IAAAA,UAAU,CAACgB,WAAD,CAAV;AACAF,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAER,KAAK,CAAC8B,KADL;AAEPrB,MAAAA,OAAO,EAAE;AACPL,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAdD;;AAgBA,QAAM2B,QAAQ,GAAG,OAAOJ,KAAP,EAAsBC,QAAtB,EAAwCI,SAAxC,EAA2DC,QAA3D,KAAgF;AAC/F,UAAMd,QAAQ,GAAG,MAAMtB,KAAK,CAACgC,IAAN,CAAW,uBAAX,EAAoC;AACzDF,MAAAA,KADyD;AAEzDC,MAAAA,QAFyD;AAGzDI,MAAAA,SAHyD;AAIzDC,MAAAA;AAJyD,KAApC,CAAvB;AAMA,UAAM;AAAElB,MAAAA,WAAF;AAAeX,MAAAA;AAAf,QAAwBe,QAAQ,CAACE,IAAvC;AAEAL,IAAAA,MAAM,CAACC,YAAP,CAAoBiB,OAApB,CAA4B,aAA5B,EAA2CnB,WAA3C;AACAF,IAAAA,QAAQ,CAAC;AACPL,MAAAA,IAAI,EAAER,KAAK,CAACmC,QADL;AAEP1B,MAAAA,OAAO,EAAE;AACPL,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAhBD;;AAkBA,QAAMgC,MAAM,GAAG,YAAY;AACzBrC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAc,IAAAA,QAAQ,CAAC;AAAEL,MAAAA,IAAI,EAAER,KAAK,CAACqC;AAAd,KAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,aAAa,GAAIX,KAAD,IAAmBH,OAAO,CAACe,GAAR,CAAYZ,KAAZ,CAAzC;;AAEA,QAAMa,aAAa,GAAG,MAAM,CAAE,CAA9B;;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE,EACL,GAAGlC,KADE;AAELmC,MAAAA,MAAM,EAAE,KAFH;AAGLf,MAAAA,KAHK;AAILU,MAAAA,MAJK;AAKLL,MAAAA,QALK;AAMLO,MAAAA,aANK;AAOLE,MAAAA;AAPK,KADT;AAAA,cAWG5B;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;AAED,SAASF,WAAT,EAAsBC,YAAtB","sourcesContent":["import { createContext, ReactNode, useEffect, useReducer } from 'react';\n// utils\nimport axios from '../utils/axios';\nimport { isValidToken, setSession } from '../utils/jwt';\n// @types\nimport { ActionMap, AuthState, AuthUser, JWTContextType } from '../@types/auth';\n\n// ----------------------------------------------------------------------\n\nenum Types {\n  Initial = 'INITIALIZE',\n  Login = 'LOGIN',\n  Logout = 'LOGOUT',\n  Register = 'REGISTER'\n}\n\ntype JWTAuthPayload = {\n  [Types.Initial]: {\n    isAuthenticated: boolean;\n    user: AuthUser;\n  };\n  [Types.Login]: {\n    user: AuthUser;\n  };\n  [Types.Logout]: undefined;\n  [Types.Register]: {\n    user: AuthUser;\n  };\n};\n\nexport type JWTActions = ActionMap<JWTAuthPayload>[keyof ActionMap<JWTAuthPayload>];\n\nconst initialState: AuthState = {\n  isAuthenticated: false,\n  isInitialized: false,\n  user: null\n};\n\nconst JWTReducer = (state: AuthState, action: JWTActions) => {\n  switch (action.type) {\n    case 'INITIALIZE':\n      return {\n        isAuthenticated: action.payload.isAuthenticated,\n        isInitialized: true,\n        user: action.payload.user\n      };\n    case 'LOGIN':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null\n      };\n\n    case 'REGISTER':\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst AuthContext = createContext<JWTContextType | null>(null);\n\nfunction AuthProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(JWTReducer, initialState);\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        const accessToken = window.localStorage.getItem('accessToken');\n\n        if (accessToken && isValidToken(accessToken)) {\n          setSession(accessToken);\n\n          const response = await axios.get('/api/account/my-account');\n          const { user } = response.data;\n\n          dispatch({\n            type: Types.Initial,\n            payload: {\n              isAuthenticated: true,\n              user\n            }\n          });\n        } else {\n          dispatch({\n            type: Types.Initial,\n            payload: {\n              isAuthenticated: false,\n              user: null\n            }\n          });\n        }\n      } catch (err) {\n        console.error(err);\n        dispatch({\n          type: Types.Initial,\n          payload: {\n            isAuthenticated: false,\n            user: null\n          }\n        });\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const response = await axios.post('/api/account/login', {\n      email,\n      password\n    });\n    const { accessToken, user } = response.data;\n\n    setSession(accessToken);\n    dispatch({\n      type: Types.Login,\n      payload: {\n        user\n      }\n    });\n  };\n\n  const register = async (email: string, password: string, firstName: string, lastName: string) => {\n    const response = await axios.post('/api/account/register', {\n      email,\n      password,\n      firstName,\n      lastName\n    });\n    const { accessToken, user } = response.data;\n\n    window.localStorage.setItem('accessToken', accessToken);\n    dispatch({\n      type: Types.Register,\n      payload: {\n        user\n      }\n    });\n  };\n\n  const logout = async () => {\n    setSession(null);\n    dispatch({ type: Types.Logout });\n  };\n\n  const resetPassword = (email: string) => console.log(email);\n\n  const updateProfile = () => {};\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        method: 'jwt',\n        login,\n        logout,\n        register,\n        resetPassword,\n        updateProfile\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}