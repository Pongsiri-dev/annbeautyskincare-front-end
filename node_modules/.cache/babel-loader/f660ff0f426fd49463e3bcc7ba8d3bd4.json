{"ast":null,"code":"var _jsxFileName = \"/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/components/TextMaxLine.tsx\";\nimport { forwardRef } from 'react'; // @mui\n\nimport { Typography, Link } from '@mui/material'; // utils\n\nimport GetFontValue from '../utils/getFontValue'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextMaxLine = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    asLink,\n    variant = 'body1',\n    line = 2,\n    persistent = false,\n    children,\n    sx,\n    ...other\n  } = _ref;\n  const {\n    lineHeight\n  } = GetFontValue(variant);\n  const style = {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    display: '-webkit-box',\n    WebkitLineClamp: line,\n    WebkitBoxOrient: 'vertical',\n    ...(persistent && {\n      height: lineHeight * line\n    }),\n    ...sx\n  };\n\n  if (asLink) {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      color: \"inherit\",\n      ref: ref,\n      variant: variant,\n      sx: { ...style\n      },\n      ...other,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Typography, {\n    ref: ref,\n    variant: variant,\n    sx: { ...style\n    },\n    ...other,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n});\nexport default TextMaxLine;","map":{"version":3,"sources":["/Users/pongsiri.an/Downloads/Theme/Minimal_TypeScript_v2.7.0/full_version_TS/src/components/TextMaxLine.tsx"],"names":["forwardRef","Typography","Link","GetFontValue","TextMaxLine","ref","asLink","variant","line","persistent","children","sx","other","lineHeight","style","overflow","textOverflow","display","WebkitLineClamp","WebkitBoxOrient","height"],"mappings":";AAAA,SAASA,UAAT,QAAsC,OAAtC,C,CACA;;AAEA,SAASC,UAAT,EAAiDC,IAAjD,QAA6D,eAA7D,C,CACA;;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;;AAYA,MAAMC,WAAW,gBAAGJ,UAAU,CAC5B,OAAsFK,GAAtF,KAA8F;AAAA,MAA7F;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAO,GAAG,OAApB;AAA6BC,IAAAA,IAAI,GAAG,CAApC;AAAuCC,IAAAA,UAAU,GAAG,KAApD;AAA2DC,IAAAA,QAA3D;AAAqEC,IAAAA,EAArE;AAAyE,OAAGC;AAA5E,GAA6F;AAC5F,QAAM;AAAEC,IAAAA;AAAF,MAAiBV,YAAY,CAACI,OAAD,CAAnC;AAEA,QAAMO,KAAK,GAAG;AACZC,IAAAA,QAAQ,EAAE,QADE;AAEZC,IAAAA,YAAY,EAAE,UAFF;AAGZC,IAAAA,OAAO,EAAE,aAHG;AAIZC,IAAAA,eAAe,EAAEV,IAJL;AAKZW,IAAAA,eAAe,EAAE,UALL;AAMZ,QAAIV,UAAU,IAAI;AAChBW,MAAAA,MAAM,EAAEP,UAAU,GAAGL;AADL,KAAlB,CANY;AASZ,OAAGG;AATS,GAAd;;AAYA,MAAIL,MAAJ,EAAY;AACV,wBACE,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAsB,MAAA,GAAG,EAAED,GAA3B;AAAgC,MAAA,OAAO,EAAEE,OAAzC;AAAkD,MAAA,EAAE,EAAE,EAAE,GAAGO;AAAL,OAAtD;AAAA,SAAwEF,KAAxE;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE,QAAC,UAAD;AAAY,IAAA,GAAG,EAAEL,GAAjB;AAAsB,IAAA,OAAO,EAAEE,OAA/B;AAAwC,IAAA,EAAE,EAAE,EAAE,GAAGO;AAAL,KAA5C;AAAA,OAA8DF,KAA9D;AAAA,cACGF;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7B2B,CAA9B;AAgCA,eAAeN,WAAf","sourcesContent":["import { forwardRef, ReactNode } from 'react';\n// @mui\nimport { Variant } from '@mui/material/styles/createTypography';\nimport { Typography, TypographyProps, LinkProps, Link } from '@mui/material';\n// utils\nimport GetFontValue from '../utils/getFontValue';\n\n// ----------------------------------------------------------------------\n\ntype IProps = TypographyProps & LinkProps;\n\ninterface Props extends IProps {\n  line?: number;\n  asLink?: boolean;\n  persistent?: boolean;\n  children: ReactNode;\n  variant?: Variant;\n}\n\nconst TextMaxLine = forwardRef<HTMLAnchorElement, Props>(\n  ({ asLink, variant = 'body1', line = 2, persistent = false, children, sx, ...other }, ref) => {\n    const { lineHeight } = GetFontValue(variant);\n\n    const style = {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      display: '-webkit-box',\n      WebkitLineClamp: line,\n      WebkitBoxOrient: 'vertical',\n      ...(persistent && {\n        height: lineHeight * line,\n      }),\n      ...sx,\n    } as const;\n\n    if (asLink) {\n      return (\n        <Link color=\"inherit\" ref={ref} variant={variant} sx={{ ...style }} {...other}>\n          {children}\n        </Link>\n      );\n    }\n\n    return (\n      <Typography ref={ref} variant={variant} sx={{ ...style }} {...other}>\n        {children}\n      </Typography>\n    );\n  }\n);\n\nexport default TextMaxLine;\n"]},"metadata":{},"sourceType":"module"}